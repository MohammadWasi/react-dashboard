{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // login json\n\nconst loginData = {\n  \"username\": \"hruday@gmail.com\",\n  \"password\": 'hruday123' // Load User\n\n};\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    let formData = body;\n\n    if (loginData.username === formData.email && loginData.password === formData.password) {\n      console.log('login success');\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    } else {\n      let error = 'invalid username and password';\n      dispatch(setAlert(error.msg, 'danger'));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    } // dispatch(loadUser());\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/wasi/ds/client/src/actions/auth.js"],"names":["axios","setAlert","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loginData","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","login","email","password","body","formData","username","console","log","error","msg","errors","response","forEach","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,MALF,EAMEC,aANF,QAOO,SAPP;AAQA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AAEA,MAAMC,SAAS,GAAG;AAChB,cAAW,kBADK;AAEhB,cAAY,WAFI,CAKlB;;AALkB,CAAlB;AAMA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBL,IAAAA,YAAY,CAACI,YAAY,CAACC,KAAd,CAAZ;AACD;;AAED,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,WADC;AAEPe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD;AACF,CAjBM,C,CAoBP;;AACA,OAAO,MAAMiB,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMX,QAAN,IAAkB;AAG1D,QAAMY,IAAI,GAAG;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;;AAKA,MAAI;AACF,QAAIE,QAAQ,GAAGD,IAAf;;AACF,QAAGd,SAAS,CAACgB,QAAV,KAAuBD,QAAQ,CAACH,KAAhC,IAAyCZ,SAAS,CAACa,QAAV,KAAuBE,QAAQ,CAACF,QAA5E,EAAsF;AACpFI,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACFhB,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEZ;AADC,OAAD,CAAR;AAID,KANC,MAOG;AACH,UAAIwB,KAAK,GAAG,+BAAZ;AACAjB,MAAAA,QAAQ,CAACV,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAR;AACAlB,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEX;AADD,OAAD,CAAR;AAID,KAhBK,CAmBF;;AACD,GApBD,CAoBE,OAAOc,GAAP,EAAY;AACZ,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeJ,KAAK,IAAIjB,QAAQ,CAACV,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDlB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CAvCM,C,CAyCP;;AACA,OAAO,MAAM4B,MAAM,GAAG,MAAMtB,QAAQ,IAAI;AACtCA,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;AACAI,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACD,CAHM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// login json\n\nconst loginData = {\n  \"username\":\"hruday@gmail.com\",\n  \"password\" :'hruday123'\n  }\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  \n\n  const body = { email, password };\n\n  \n  \n\n  try {\n    let formData = body;\n  if(loginData.username === formData.email && loginData.password === formData.password) {\n    console.log('login success')\n  dispatch({\n    type: LOGIN_SUCCESS,\n  });\n  \n}\nelse {\n  let error = 'invalid username and password';\n  dispatch(setAlert(error.msg, 'danger'));\n  dispatch({\n      type: LOGIN_FAIL\n    });\n\n}\n\n\n    // dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout / Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}