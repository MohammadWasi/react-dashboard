{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // login json\n\nconst loginData = {\n  \"username\": \"hruday@gmail.com\",\n  \"password\": 'hruday123' // Load User\n\n};\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    // const res = await axios.post('/api/auth', body, config);\n    let formData = JSON.parse(body);\n\n    if (loginData.username === formData.email && loginData.password === formData.password) {\n      console.log('login success');\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    } // dispatch(loadUser());\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/wasi/ds/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loginData","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","login","email","password","body","JSON","stringify","formData","parse","username","console","log","errors","response","forEach","error","msg","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,EAQEC,aARF,QASO,SATP;AAUA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AAEA,MAAMC,SAAS,GAAG;AAChB,cAAW,kBADK;AAEhB,cAAY,WAFI,CAKlB;;AALkB,CAAlB;AAMA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBL,IAAAA,YAAY,CAACI,YAAY,CAACC,KAAd,CAAZ;AACD;;AAED,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,WADC;AAEPe,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD;AACF,CAjBM,C,CAoBP;;AACA,OAAO,MAAMiB,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMX,QAAN,IAAkB;AAG1D,QAAMY,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEJ,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AAKA,MAAI;AACF;AACA,QAAII,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAWJ,IAAX,CAAf;;AACF,QAAGd,SAAS,CAACmB,QAAV,KAAuBF,QAAQ,CAACL,KAAhC,IAAyCZ,SAAS,CAACa,QAAV,KAAuBI,QAAQ,CAACJ,QAA5E,EAAsF;AACpFO,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACFnB,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEZ;AADC,OAAD,CAAR;AAGD,KARK,CAWF;;AACD,GAZD,CAYE,OAAOe,GAAP,EAAY;AACZ,UAAMY,MAAM,GAAGZ,GAAG,CAACa,QAAJ,CAAad,IAAb,CAAkBa,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIvB,QAAQ,CAACZ,QAAQ,CAACmC,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDxB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CA/BM,C,CAiCP;;AACA,OAAO,MAAM+B,MAAM,GAAG,MAAMzB,QAAQ,IAAI;AACtCA,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;AACAI,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACD,CAHM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// login json\n\nconst loginData = {\n  \"username\":\"hruday@gmail.com\",\n  \"password\" :'hruday123'\n  }\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  \n\n  const body = JSON.stringify({ email, password });\n\n  \n  \n\n  try {\n    // const res = await axios.post('/api/auth', body, config);\n    let formData = JSON.parse(body);\n  if(loginData.username === formData.email && loginData.password === formData.password) {\n    console.log('login success')\n  dispatch({\n    type: LOGIN_SUCCESS,\n  });\n}\n\n\n    // dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout / Clear Profile\nexport const logout = () => dispatch => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}